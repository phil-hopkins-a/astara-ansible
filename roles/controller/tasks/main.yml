---
# Tasks to install astara

- name: install packages to enable building the appliance
  apt: pkg={{ item }} state=latest
  with_items:
    - debootstrap
    - qemu-utils

- name: install the pip packages to enable building the appliance
  pip: name={{ item }}
  with_items:
    - diskimage-builder
    - shade

- name: Create the astara user
  user: home="/var/lib/astara" createhome=yes system=yes shell=/bin/false name=astara

- name: Create the astara log dir
  file: dest=/var/log/astara owner=astara group=astara state=directory
  
- name: Create the astara lib dir
  file: dest=/var/lib/astara  owner=astara group=astara state=directory

- name: Create the astara etc dir
  file: dest=/etc/astara owner=astara group=astara state=directory

- name: Set up astara log rotation
  copy: src=astara-logrotate dest=/etc/logrotate.d/astara

- name: Set up astara sudoers
  copy: src=sudoers_astara dest=/etc/sudoers.d/astara_sudoers

- name: use git to clone the astara git repo
  git: repo=https://github.com/openstack/astara.git version={{openstack_version}}
     dest=/root/astara

- name: use git to clone the astara-neutron git repo
  git: repo=https://github.com/openstack/astara-neutron.git version={{openstack_version}}
     dest=/root/astara-neutron

- name: use git to clone the astara-appliance git repo
  git: repo=https://github.com/openstack/astara-appliance.git version={{openstack_version}}
     dest=/root/astara-appliance

- name: copy the astara etc files
  copy: src=/root/astara/etc/ dest=/etc/astara/

- name: install astara 
  shell: pip install .
   chdir=/root/astara

- name: Install astara-neutron
  shell: pip install .
    chdir=/root/astara-neutron

- name: set the core_plugins for astara before newton
  shell: sed -i 's|core_plugin = .*|core_plugin = astara_neutron.plugins.ml2_neutron_plugin.Ml2Plugin|g' /etc/neutron/neutron.conf; touch /etc/astara/core.sed creates=/etc/astara/core.sed
  when: openstack_version == stable/mitaka or openstack_version == stable/liberty

- name: set the core_plugins for astara
  shell: sed -i 's|core_plugin = .*|core_plugin = astara.newton_fix.Ml2Plugin|g' /etc/neutron/neutron.conf; touch /etc/astara/core.sed creates=/etc/astara/core.sed
  when: openstack_version == stable/newton
  
- name: Test for existence of api_extensions_path
  command: grep "api_extensions_path" /etc/neutron/neutron.conf
  register: api_extensions_result
  ignore_errors: True

- name: Test for extenstions_path
  shell: grep "notification_driver" /etc/neutron/neutron.conf
  register: notification_driver_result
  ignore_errors: True

- name: set the service_plugins, and api_extensions_path, notification_driver for astara
  shell: sed -i 's|service_plugins = .*|service_plugins = astara_neutron.plugins.ml2_neutron_plugin.L3RouterPlugin\napi_extensions_path = /usr/local/lib/python2.7/dist-packages/astara_neutron/extensions\nnotification_driver  = neutron.openstack.common.notifier.rpc_notifier|g' /etc/neutron/neutron.conf; touch /etc/astara/service.sed creates=/etc/astara/service.sed
  ignore_errors: true
  when: api_extensions_result|failed and notification_driver_result|failed

- name: set the service_plugins for astara
  shell: sed -i 's|service_plugins = .*|service_plugins = astara_neutron.plugins.ml2_neutron_plugin.L3RouterPlugin|g' /etc/neutron/neutron.conf; touch /etc/astara/service.sed creates=/etc/astara/service.sed
  ignore_errors: true
  when: api_extensions_result|succeeded or notification_driver_result|succeeded

- name: set api_extensions_path for astara, when api_extensions_path was set.
  shell: sed -i 's|api_extensions_path =.*|api_extensions_path = /usr/local/lib/python2.7/dist-packages/astara_neutron/extensions|g' /etc/neutron/neutron.conf; touch /etc/astara/api.sed creates=/etc/astara/api.sed
  ignore_errors: true
  when: api_extensions_result|succeeded and notification_driver_result|succeeded

- name: set notification_driver for astara, when notification_driver is set.
  shell: sed -i 's|notification_driver  =.*|notification_driver  = neutron.openstack.common.notifier.rpc_notifier|g' /etc/neutron/neutron.conf; touch /etc/astara/notif.sed creates=/etc/astara/notif.sed
  ignore_errors: true
  when: api_extensions_result|succeeded and notification_driver_result|succeeded

- name: set api_extensions_path for astara, when api_extensions_path was set and notification_driver was nt set.
  shell: sed -i 's|api_extensions_path =.*|api_extensions_path = /usr/local/lib/python2.7/dist-packages/astara_neutron/extensions\nnotification_driver  = neutron.openstack.common.notifier.rpc_notifier|g' /etc/neutron/neutron.conf; touch /etc/astara/api.sed creates=/etc/astara/api.sed
  ignore_errors: true
  when: api_extensions_result|succeeded and notification_driver_result|failed

- name: set api_extensions_path for astara, when notification_driver was set and api_extensions_path was not set.
  shell: sed -i 's|notification_driver  =.*|notification_driver  = neutron.openstack.common.notifier.rpc_notifier\napi_extensions_path = /usr/local/lib/python2.7/dist-packages/astara_neutron/extensions|g' /etc/neutron/neutron.conf; touch /etc/astara/api.sed creates=/etc/astara/api.sed
  ignore_errors: true
  when: api_extensions_result|failed and notification_driver_result|succeeded

- name: set up port security
  shell: sed -i 's/\[ML2\]/\[ML2\]\nextension_drivers = port_security\nl2_population = True\n/g' /etc/neutron/plugins/ml2/ml2_conf.ini; touch /etc/astara/ext.sed
    creates=/etc/astata/ext.sed

- name: set ipv6 in nova conf
  shell: sed -i  's/\[DEFAULT\]/\[DEFAULT\]\nuse_ipv6=True\nservice_metadata_proxy = True\n/g' /etc/nova/nova.conf; touch /etc/astara/ipv6.sed
    creates=/etc/astara/ipv6.sed

- name: restart the neutron and nova services
  service: name={{ item }} state=restarted enabled=yes
  with_items:
   - nova-api
   - neutron-server

- name: Start the openvswitch neutron services
  service: name=neutron-openvswitch-agent state=started enabled=yes
  when: ml2_environment == 'openvswitch'

- name: Start the linuxbridge neutron services
  service: name=neutron-linuxbridge-agent state=started enabled=yes
  when: ml2_environment == 'linuxbridge'

- name: short delay to allow the services to get started
  shell: sleep 20

- name: stop the neutron l3 services
  service: name={{ item }} state=stopped enabled=no
  with_items:
   - neutron-l3-agent
   - neutron-dhcp-agent
   - neutron-metadata-agent
  ignore_errors: True

- name: move the neutron l3 upstart files out of the way
  shell: mv /etc/init/neutron-l3-agent.conf /root
  ignore_errors: yes
  when: ubuntu == "u1404"

- name: move the neutron dhcp upstart files out of the way
  shell: mv /etc/init/neutron-dhcp-agent.conf /root
  ignore_errors: yes
  when: ubuntu == "u1404"

- name: move the neutron metadata upstart files out of the way
  shell: mv /etc/init/neutron-metadata-agent.conf /root
  ignore_errors: yes
  when: ubuntu == "u1404"

- name: move the neutron l3 agent systemd files out of the way
  shell: mv /lib/systemd/system/neutron-l3-agent.service /root
  ignore_errors: yes
  when: ubuntu == "u1604"

- name: move the neutron dhcp agent systemd files out of the way
  shell: mv /lib/systemd/system/neutron-dhcp-agent.service /root
  ignore_errors: yes
  when: ubuntu == "u1604"

- name: move the neutron metadata agent systemd files out of the way
  shell: mv /lib/systemd/system/neutron-metadata-agent.service /root
  ignore_errors: yes
  when: ubuntu == "u1604"

- name: Copy the astara orchestrator systemd file
  copy: src=astara-orchestrator.service dest=/lib/systemd/system/astara-orchestrator.service
  notify: restart neutron
  when: ubuntu == "u1604"

- name: Copy the astara orchestrator systemd init file
  copy: src=astara-orchestrator dest=/etc/init.d/astara-orchestrator mode=755
  notify: restart neutron
  when: ubuntu == "u1604"

- name: Create the management network
  os_network:
    state: present
    name: "{{ as_mgmt_net_name }}"
    external: false
    auth:
      auth_url: "{{ as_auth_url }}"
      username: "{{ as_username }}"
      password: "{{ as_password }}"
      project_name: "{{ as_project_name }}"
      user_domain_name: "{{ as_user_domain_name }}"
      project_domain_name: "{{ as_project_domain_name }}"
      identity_api_version: "{{ as_identity_api_version }}"
      region_name: "{{ as_region_name }}"
  register: "{{ as_mgmt_net_name }}"

- name: Create the management subnet
  os_subnet:
    state: present
    network_name: "{{ as_mgmt_net_name }}"
    name: "{{ as_mgmt_subnet_name }}"
    cidr: "{{ as_mgmt_prefix }}"
    ip_version: "6"
    ipv6_address_mode: slaac
    enable_dhcp: true
    auth:
      auth_url: "{{ as_auth_url }}"
      username: "{{ as_username }}"
      password: "{{ as_password }}"
      project_name: "{{ as_project_name }}"
      user_domain_name: "{{ as_user_domain_name }}"
      project_domain_name: "{{ as_project_domain_name }}"
      identity_api_version: "{{ as_identity_api_version }}"
      region_name: "{{ as_region_name }}"
  register: "{{ as_mgmt_subnet_name }}"

- name: Create the external shared network
  os_network:
    state: present
    name: "{{ as_external_net_name }}"
    external: true
    shared: true
    auth:
      auth_url: "{{ as_auth_url }}"
      username: "{{ as_username }}"
      password: "{{ as_password }}"
      project_name: "{{ as_project_name }}"
      user_domain_name: "{{ as_user_domain_name }}"
      project_domain_name: "{{ as_project_domain_name }}"
      identity_api_version: "{{ as_identity_api_version }}"
      region_name: "{{ as_region_name }}"
  register: "{{ as_external_net_name }}"

- name: create the external shared subnet
  os_subnet:
    state: present
    network_name: "{{ as_external_net_name }}"
    name: "{{ as_external_subnet_name }}"
    cidr: "{{ as_external_prefix }}"
    ip_version: "4"
    enable_dhcp: false
    auth:
      auth_url: "{{ as_auth_url }}"
      username: "{{ as_username }}"
      password: "{{ as_password }}"
      project_name: "{{ as_project_name }}"
      user_domain_name: "{{ as_user_domain_name }}"
      project_domain_name: "{{ as_project_domain_name }}"
      identity_api_version: "{{ as_identity_api_version }}"
      region_name: "{{ as_region_name }}"
  register: "{{ as_external_subnet_name }}"

- name: copy the ssh keys
  copy: src=/root/.ssh/id_rsa.pub dest=/etc/astara/ owner=astara group=astara mode=600

- name: Install a pip dependency for mysql
  pip: name=PyMySQL

- name: Setup DB for astara
  shell: mysql -u root -p{{ mysql_root_pass }} -e "CREATE DATABASE astara;"; touch /etc/astara/db.ast 
    creates=/etc/astara/db.ast
         
- name: Give right to astara user.
  mysql_user: login_user=root login_password={{ mysql_root_pass }} name=astara password={{ astara_db_pass }} priv=*.*:ALL host='%' state=present

- name: build the astara appliance
  shell: ELEMENTS_PATH=diskimage-builder/elements DIB_RELEASE=jessie DIB_EXTLINUX=1 disk-image-create debian vm astara -o astara; touch /root/astara-appliance/appliance.ast 
    creates=/root/astara-appliance/appliance.ast
    chdir=/root/astara-appliance

- name: Create the router image (this can also be the loadbalancer image)
  os_image:
    state: present
    name: astara_router
    container_format: bare
    disk_format: qcow2
    filename: /root/astara-appliance/astara.qcow2 
    auth:
      auth_url: "{{ as_auth_url }}"
      username: "{{ as_username }}"
      password: "{{ as_password }}"
      project_name: "{{ as_project_name }}"
      user_domain_name: "{{ as_user_domain_name }}"
      project_domain_name: "{{ as_project_domain_name }}"
      identity_api_version: "{{ as_identity_api_version }}"
      region_name: "{{ as_region_name }}"

- name: Get the router image id
  os_image_facts:
    image: astara_router
    auth:
      auth_url: "{{ as_auth_url }}"
      username: "{{ as_username }}"
      password: "{{ as_password }}"
      project_name: "{{ as_project_name }}"
      user_domain_name: "{{ as_user_domain_name }}"
      project_domain_name: "{{ as_project_domain_name }}"
      identity_api_version: "{{ as_identity_api_version }}"
      region_name: "{{ as_region_name }}"
  register: astara_router

- name: create a flavor for the astara router image
  os_nova_flavor:
    state: present
    name: m1_astara
    ram: 512
    vcpus: 1
    disk: 3
    is_public: true
    auth:
      auth_url: "{{ as_auth_url }}"
      username: "{{ as_username }}"
      password: "{{ as_password }}"
      project_name: "{{ as_project_name }}"
      user_domain_name: "{{ as_user_domain_name }}"
      project_domain_name: "{{ as_project_domain_name }}"
      identity_api_version: "{{ as_identity_api_version }}"
      region_name: "{{ as_region_name }}"
  register: m1_astara

- name: copy the orchestrator.ini file
  template: src=orchestrator.ini.j2  dest=/etc/astara/orchestrator.ini owner=astara group=astara

- name: create the astara db tables
  shell: /usr/local/bin/astara-dbsync --config-file /etc/astara/orchestrator.ini upgrade; touch /etc/astara/db.synced
         creates=/etc/astara/db.synced

- name: create the astara upstart file
  copy: src=astara_init dest=/etc/init/astara-orchestrator.conf
  when: ubuntu == "u1404"

- name: start the astara service
  service: name=astara-orchestrator state=started enabled=yes

